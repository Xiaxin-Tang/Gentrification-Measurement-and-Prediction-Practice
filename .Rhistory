variables = c("B01003_001E", "B19013_001E",
"B01002_001E", "B02001_002E",
"B23006_023E", "B08301_001E", "B08301_010E"),
year = 2019,
state = "PA",
county = "Philadelphia",
geometry = TRUE,
output = "wide") %>%
rename(Total_Pop_t2 =  B01003_001E,
Med_Inc_t2 = B19013_001E,
Med_Age_t2 = B01002_001E,
Black_Pop_t2 = B02001_002E,
Education_attainment_t2 = B23006_023E,
Median_rent_t2 = B08301_001E,
Total_Public_Trans_t2 = B08301_010E) %>%
select(Total_Pop_t2, Med_Inc_t2, Black_Pop_t2, Education_attainment_t2,
Total_Public_Trans_t2, Med_Age_t2, Median_rent_t2, GEOID) %>%
mutate(Percent_black_t2 = Black_Pop_t2 / Total_Pop_t2) %>%
st_transform(crs = "EPSG:4326") %>%
st_drop_geometry()
PHLCensus_2019 <-
get_acs(geography = "tract",
variables = c("B01003_001E", "B19013_001E",
"B01002_001E", "B02001_002E",
"B23006_023E", "B08301_001E", "B08301_010E"),
year = 2019,
state = "PA",
county = "Philadelphia",
geometry = TRUE,
output = "wide") %>%
rename(Total_Pop_t2 =  B01003_001E,
Med_Inc_t2 = B19013_001E,
Med_Age_t2 = B01002_001E,
Black_Pop_t2 = B02001_002E,
Education_attainment_t2 = B23006_023E,
Median_rent_t2 = B08301_001E,
Total_Public_Trans_t2 = B08301_010E) %>%
select(Total_Pop_t2, Med_Inc_t2, Black_Pop_t2, Education_attainment_t2,
Total_Public_Trans_t2, Med_Age_t2, Median_rent_t2, GEOID) %>%
mutate(Percent_black_t2 = Black_Pop_t2 / Total_Pop_t2) %>%
st_transform(crs = "EPSG:4326") %>%
st_drop_geometry()
PHLCensus_2014 <-
get_acs(geography = "tract",
variables = c("B01003_001E", "B19013_001E",
"B01002_001E", "B02001_002E",
"B23006_023E", "B08301_001E", "B08301_010E"),
year = 2014,
state = "PA",
county = "Philadelphia",
geometry = TRUE,
output = "wide") %>%
rename(Total_Pop_t1 =  B01003_001E,
Med_Inc_t1 = B19013_001E,
Med_Age_t1 = B01002_001E,
Black_Pop_t1 = B02001_002E,
Education_attainment_t1 = B23006_023E,
Median_rent_t1 = B08301_001E,
Total_Public_Trans_t1 = B08301_010E) %>%
select(Total_Pop_t1, Med_Inc_t1, Black_Pop_t1, Education_attainment_t1,
Total_Public_Trans_t1, Med_Age_t1, Median_rent_t1,
GEOID, geometry) %>%
mutate(Percent_black_t1 = Black_Pop_t1 / Total_Pop_t1) %>%
st_transform(crs = "EPSG:4326")
PHLCensus <- PHLCensus_2019 %>%
left_join(., PHLCensus_2014)
PHLCensus <- PHLCensus %>%
mutate(change_pop = (Total_Pop_t2 - Total_Pop_t1)/Total_Pop_t1,
change_black_pop = (Black_Pop_t2 - Black_Pop_t1)/Black_Pop_t1,
change_high_income = (Med_Inc_t2 - Med_Inc_t1)/Med_Inc_t1,
change_high_edu = (Education_attainment_t2 - Education_attainment_t1)/Education_attainment_t1,
change_public_tran = (Total_Public_Trans_t2 - Total_Public_Trans_t1)/mean(Total_Public_Trans_t1),
change_age = (Med_Age_t2 - Med_Age_t1)/Med_Age_t1,
change_rent = (Median_rent_t2 - Median_rent_t1)/Median_rent_t1,
change_perc_black = (Percent_black_t2 - Percent_black_t1)/Percent_black_t1 * -1,
gent_score = change_perc_black + change_rent - change_age +
change_high_edu + change_high_income) %>%
mutate(cate_gent = ifelse(gent_score < 0, "degentrified",
ifelse(gent_score > 0 & gent_score < 0.61, "slightly gentrified",
ifelse(gent_score > 0.61 & gent_score < 1.345, "gentrified", "highly gentrified"))))
PHLCensus <- PHLCensus %>%
mutate(change_pop = (Total_Pop_t2 - Total_Pop_t1)/Total_Pop_t1,
change_black_pop = (Black_Pop_t2 - Black_Pop_t1)/Black_Pop_t1,
change_high_income = (Med_Inc_t2 - Med_Inc_t1)/Med_Inc_t1,
change_high_edu = (Education_attainment_t2 - Education_attainment_t1)/Education_attainment_t1,
change_public_tran = (Total_Public_Trans_t2 - Total_Public_Trans_t1)/mean(Total_Public_Trans_t1),
change_age = (Med_Age_t2 - Med_Age_t1)/Med_Age_t1,
change_rent = (Median_rent_t2 - Median_rent_t1)/Median_rent_t1,
change_perc_black = (Percent_black_t2 - Percent_black_t1)/Percent_black_t1 * -1,
gent_score = change_rent + change_high_income) %>%
mutate(cate_gent = ifelse(gent_score < 0, "degentrified",
ifelse(gent_score > 0 & gent_score < 0.61, "slightly gentrified",
ifelse(gent_score > 0.61 & gent_score < 1.345, "gentrified", "highly gentrified"))))
quartiles <- quantile(PHLCensus$gent_score, probs = c(0.25, 0.5, 0.75))
quartiles
PHLCensus$Black_Pop_t2[PHLCensus$Black_Pop_t2 == 0] <- 2
PHLCensus$Black_Pop_t1[PHLCensus$Black_Pop_t1 == 0] <- 1
PHLCensus$gent_score[is.infinite(PHLCensus$gent_score)] <- 0
PHLCensus$gent_score[is.infinite(PHLCensus$gent_score)] <- 0
PHLCensus$gent_score[is.na(PHLCensus$gent_score)] <- 0
PHLCensus <- st_as_sf(PHLCensus, crs = 4326)
ggplot(data = PHLCensus, aes(x = gent_score)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Random Data", x = "Value", y = "Frequency")
library(mapview)
library(mapview)
Parks_2019 <- st_read("PPR_Properties.geojson") %>%
select(PUBLIC_NAME) %>%
st_transform(crs = "EPSG:4326")
# Calculate centroids
centroids_2019 <- st_centroid(Parks_2019)
Parks_2016 <- st_read("PhillyFPC_PPR_parks_point.shp") %>%
select("NAME")  %>%
st_transform(crs = "EPSG:4326")
mapview(PHLCensus)
mapview(PHLCensus)
mapview(Parks_2019)
mapview(Parks_2019)
PHLCensus_park_2016 <- PHLCensus %>%
st_join(., Parks_2016) %>%
group_by(GEOID) %>%
mutate(total_parks_t1 = n(),
total_parks_t1 = case_when(
is.na(NAME) ~ 0,
TRUE ~ total_parks_t1
)) %>%
distinct(GEOID, total_parks_t1)
PHLCensus_park_2019 <- PHLCensus %>%
st_join(., centroids_2019) %>%
group_by(GEOID) %>%
mutate(total_parks_t2 = n(),
total_parks_t2 = case_when(
is.na(PUBLIC_NAME) ~ 0,
TRUE ~ total_parks_t2
)) %>%
distinct(GEOID, total_parks_t2)
PHLCensus <- PHLCensus %>%
left_join(., PHLCensus_park_2016) %>%
left_join(., PHLCensus_park_2019)
bus_2014 <- read_csv("Bus_Ridership_by_Census_Tract_2014.csv") %>%
filter(Season == "Fall 2014") %>%
group_by(Census_Tract_ID) %>%
summarise(Total_On_t1 = sum(On_)) %>%
select("Total_On_t1", "Census_Tract_ID")%>%
rename(GEOID = Census_Tract_ID)
bus_2014$GEOID <- as.character(bus_2014$GEOID)
bus_2019 <- read_csv("Bus_Ridership_by_Census_Tract_2019.csv") %>%
filter(Season == "Fall 2019") %>%
group_by(Census_Tract_ID) %>%
summarise(Total_On_t2 = sum(On_)) %>%
select("Total_On_t2", "Census_Tract_ID") %>%
rename(GEOID = Census_Tract_ID)
bus_2019$GEOID <- as.character(bus_2019$GEOID)
PHLCensus_Bus_2014 <- PHLCensus %>%
left_join(., bus_2014, by = c("GEOID"))
PHLCensus <- PHLCensus_Bus_2014 %>%
left_join(., bus_2019, by = c("GEOID"))
Permits2 <- st_read("permits_2016-present/permits.shp") %>%
filter(grepl("^2019", permitissu)) %>%
select("objectid")
permits_per_tract2 <- PHLCensus %>%
st_join(., Permits2) %>%
group_by(GEOID) %>%
summarise(num_permits_t2 = n()) %>%
st_drop_geometry()
PHLCensus <- PHLCensus %>%
left_join(., permits_per_tract2)
Permits1 <- st_read("permits_2007-2015/permits.shp") %>%
filter(grepl("^2014", permitissu)) %>%
select("objectid")
Permits1 <- st_read("permits_2007-2015/permits.shp") %>%
filter(grepl("^2014", permitissu)) %>%
select("objectid")
permits_per_tract1 <- PHLCensus %>%
st_join(., Permits1) %>%
group_by(GEOID) %>%
summarise(num_permits_t1 = n()) %>%
st_drop_geometry()
PHLCensus <- PHLCensus %>%
left_join(., permits_per_tract1)
food_2019 <- st_read("Food_access/NeighborhoodFoodRetail.geojson") %>%
mutate(HPSS_ACCESS_t2 = ifelse(HPSS_ACCESS == "No Access", 0,
ifelse(HPSS_ACCESS == "Low Access", 1, 2))) %>%
select("HPSS_ACCESS_t2")
# Calculate mean of column A (ignoring NAs)
mean_A <- mean(food_2019$HPSS_ACCESS_t2, na.rm = TRUE)
# Replace NA values in column A with the mean
food_2019$HPSS_ACCESS_t2[is.na(food_2019$HPSS_ACCESS_t2)] <- mean_A
food_2019 <- st_centroid(food_2019)
Access_census_2019 <- PHLCensus %>%
st_join(., food_2019) %>%
group_by(GEOID) %>%
summarise(Access_t2 = mean(HPSS_ACCESS_t2)) %>%
st_drop_geometry()
food_2014 <- st_read("Food_access/Walkable_Access_Healthy_Food.geojson") %>%
mutate(HPSS_ACCESS_t1 = ifelse(ACCESS_ == "No Access", 0,
ifelse(ACCESS_ == "Low Access", 1,
ifelse(ACCESS_ == "Moderate Access", 2, 3)))) %>%
select("HPSS_ACCESS_t1")
food_2014 <- st_make_valid(food_2014)
mapview(food_2014)
food_2014 <- st_centroid(food_2014)
# Calculate mean of column A (ignoring NAs)
mean_B <- mean(food_2019$HPSS_ACCESS_t2, na.rm = TRUE)
# Replace NA values in column A with the mean
food_2014$HPSS_ACCESS_t1[is.na(food_2014$HPSS_ACCESS_t1)] <- mean_B
Access_census_2014 <- PHLCensus %>%
st_join(., food_2014) %>%
group_by(GEOID) %>%
summarise(Access_t1 = mean(HPSS_ACCESS_t1)) %>%
st_drop_geometry()
PHLCensus <- PHLCensus %>%
left_join(., Access_census_2014) %>%
left_join(., Access_census_2019)
# Check the CRS of PHLCensus
PHLCensus_crs <- st_crs(PHLCensus)
school_2019 <- st_read("Schools.geojson") %>%
select("OBJECTID")
school_2019 <- st_transform(school_2019, crs = PHLCensus_crs)
school_count_2019 <- PHLCensus %>%
st_join(., school_2019) %>%
group_by(GEOID) %>%
summarise(school_count_2019 = n()) %>%
st_drop_geometry()
school_2014 <- st_read("PhiladelphiaSchool_Facilities2016/PhiladelphiaSchool_Facilities2016.shp") %>%
select("OBJECTID")
school_2014 <- st_transform(school_2014, crs = PHLCensus_crs)
school_count_2014 <- PHLCensus %>%
st_join(., school_2014) %>%
group_by(GEOID) %>%
summarise(school_count_2014 = n()) %>%
st_drop_geometry()
PHLCensus <- PHLCensus %>%
left_join(., school_count_2014) %>%
left_join(., school_count_2019)
crime_2014 <- st_read("crime2014/incidents_part1_part2.shp") %>%
select("objectid")
crime_2014 <- st_transform(crime_2014, crs = PHLCensus_crs)
crime_2019 <- st_read("crime2019/incidents_part1_part2.shp") %>%
select("objectid")
crime_2019 <- st_transform(crime_2019, crs = PHLCensus_crs)
crime_count_2014 <- PHLCensus %>%
st_join(., crime_2014) %>%
group_by(GEOID) %>%
summarise(crime_count_2014 = n()) %>%
st_drop_geometry()
crime_count_2019 <- PHLCensus %>%
st_join(., crime_2019) %>%
group_by(GEOID) %>%
summarise(crime_count_2019 = n()) %>%
st_drop_geometry()
PHLCensus <- PHLCensus %>%
left_join(., crime_count_2014) %>%
left_join(., crime_count_2019)
PHLCensus_2022 <-
get_acs(geography = "tract",
variables = c("B01003_001E", "B19013_001E",
"B01002_001E", "B02001_002E",
"B23006_023E", "B08301_001E", "B08301_010E"),
year = 2022,
state = "PA",
county = "Philadelphia",
geometry = TRUE,
output = "wide") %>%
rename(Total_Pop_t1 =  B01003_001E,
Med_Inc_t1 = B19013_001E,
Med_Age_t1 = B01002_001E,
Black_Pop_t1 = B02001_002E,
Education_attainment_t1 = B23006_023E,
Median_rent_t1 = B08301_001E,
Total_Public_Trans_t1 = B08301_010E) %>%
select(Total_Pop_t1, Med_Inc_t1, Black_Pop_t1, Education_attainment_t1,
Total_Public_Trans_t1, Med_Age_t1, Median_rent_t1,
GEOID, geometry) %>%
mutate(Percent_black_t1 = Black_Pop_t1 / Total_Pop_t1) %>%
st_transform(crs = "EPSG:4326") %>%
select(Med_Inc_2022 = Med_Inc_t1, Med_rent_2022 = Median_rent_t1)
centroids_2022 <- st_centroid(PHLCensus_2022)
PHLCensus_2022_combined <- PHLCensus %>%
st_join(., centroids_2022) %>%
group_by(GEOID) %>%
summarise(Med_Inc_2022 = mean(Med_Inc_2022), Med_rent_2022 = mean(Med_rent_2022)) %>%
st_drop_geometry()
mean_inc <- mean(PHLCensus_2022_combined$Med_Inc_2022, na.rm = TRUE)
mean_rent <- mean(PHLCensus_2022_combined$Med_rent_2022, na.rm = TRUE)
# Replace NA values with the mean
PHLCensus_2022_combined$Med_Inc_2022 <- ifelse(is.na(PHLCensus_2022_combined$Med_Inc_2022), mean_inc, PHLCensus_2022_combined$Med_Inc_2022)
PHLCensus_2022_combined$Med_rent_2022 <- ifelse(is.na(PHLCensus_2022_combined$Med_rent_2022), mean_rent, PHLCensus_2022_combined$Med_rent_2022)
mean_rent <- mean(PHLCensus_2022_combined$Med_rent_2022[PHLCensus_2022_combined$Med_rent_2022 != 0])
# Replace 0 values with the mean
PHLCensus_2022_combined$Med_rent_2022 <- ifelse(PHLCensus_2022_combined$Med_rent_2022 == 0, mean_rent, PHLCensus_2022_combined$Med_rent_2022)
PHLCensus <- PHLCensus %>%
left_join(., PHLCensus_2022_combined)
PHLCensus <- PHLCensus %>%
mutate(gent_score_2022 = (Med_rent_2022 - Median_rent_t2)/Med_rent_2022 + (Med_Inc_2022 - Med_Inc_t2)/Med_Inc_2022)
PHLCensus$gent_score_2022[is.na(PHLCensus$gent_score_2022)] <- 0
PHLCensus <- PHLCensus %>%
mutate(gent_score_difference = gent_score_2022 - gent_score)
PHLCensus <- PHLCensus %>%
mutate(park_change = (total_parks_t2 - total_parks_t1)/total_parks_t1,
bus_change = (Total_On_t2 - Total_On_t1)/Total_On_t1,
permits_change = (num_permits_t2 - num_permits_t1)/num_permits_t1,
food_change = (Access_t2 - Access_t1)/Access_t1,
school_change = (school_count_2019 - school_count_2014)/school_count_2014,
crime_change = (crime_count_2019 - crime_count_2014)/crime_count_2014)
PHLCensus <- PHLCensus[complete.cases(PHLCensus$gent_score), ]
PHLCensus <- transform(PHLCensus,
permits_change = ifelse(is.na(permits_change), mean(permits_change, na.rm = TRUE), permits_change),
food_change = ifelse(is.na(food_change), mean(food_change, na.rm = TRUE), food_change),
school_change = ifelse(is.na(school_change), mean(school_change, na.rm = TRUE), school_change),
crime_change = ifelse(is.na(crime_change), mean(crime_change, na.rm = TRUE), crime_change),
change_high_income = ifelse(is.na(change_high_income), mean(change_high_income, na.rm = TRUE), change_high_income))
model.2 <- lm(gent_score ~ num_permits_t2 +  total_parks_t2 + school_count_2019 +
crime_count_2019 +  Med_Age_t2, data = PHLCensus)
summary(model)
summary(model.2)
ggplot(data = PHLCensus, aes(x = gent_score)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Random Data", x = "Value", y = "Frequency")
ggplot(data = PHLCensus, aes(x = permits_change)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Random Data", x = "Value", y = "Frequency")
ggplot(data = PHLCensus, aes(x = bus_change)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Random Data", x = "Value", y = "Frequency")
ggplot(data = PHLCensus, aes(x = change_age)) +
geom_histogram(binwidth = 0.5, fill = "skyblue", color = "black") +
labs(title = "Histogram of Random Data", x = "Value", y = "Frequency")
library(caret)
PHLCensus.training <- PHLCensus[inTrain,]
PHLCensus.test <- PHLCensus[-inTrain,]
install.packages("caret")
install.packages("caret")
library(caret)
inTrain <- createDataPartition(
y = paste(PHLCensus$gent_score),
p = .60, list = FALSE)
PHLCensus.training <- PHLCensus[inTrain,]
PHLCensus.test <- PHLCensus[-inTrain,]
reg.training <- lm(gent_score ~ ., data = st_drop_geometry(PHLCensus.training) %>%
dplyr::select(gent_score, num_permits_t2, total_parks_t2,
school_count_2019, crime_count_2019, Med_Age_t2))
PHLCensus.test <-
PHLCensus.test %>%
mutate(gent_score.Predict = predict(reg.training, PHLCensus.test),
gent_score.Error = gent_score.Predict - gent_score,
gent_score.AbsError = abs(gent_score.Predict - gent_score),
gent_score.APE = (abs(gent_score.Predict - gent_score)) / gent_score.Predict)
# Define the number of folds for cross-validation
k <- 10
# Create indices for k-fold cross-validation
folds <- createFolds(PHLCensus$gent_score, k = k, list = TRUE)
# Initialize vectors to store performance metrics for each fold
APEs <- numeric(k)
# Perform k-fold cross-validation
for (i in 1:k) {
# Extract training and testing indices for this fold
train_indices <- unlist(folds[-i])
test_indices <- unlist(folds[i])
# Split data into training and testing sets
PHLCensus.training <- PHLCensus[train_indices, ]
PHLCensus.test <- PHLCensus[test_indices, ]
# Fit the model
reg.training <- lm(gent_score ~ ., data = st_drop_geometry(PHLCensus.training) %>%
dplyr::select(gent_score, num_permits_t2, total_parks_t2,
school_count_2019, crime_count_2019, Med_Age_t2))
# Make predictions on the testing set
predictions <- predict(reg.training, PHLCensus.test)
# Calculate performance metrics for this fold
errors <- predictions - PHLCensus$gent_score[test_indices]
abs_errors <- abs(errors)
APE <- abs_errors / predictions
# Store the performance metrics for this fold
APEs[i] <- mean(APE, na.rm = TRUE)
}
PHLCensus.test <- PHLCensus.test %>%
mutate(gent_score.Predict = predict(reg.training, newdata = PHLCensus.test),
gent_score.Error = gent_score.Predict - gent_score,
gent_score.AbsError = abs(gent_score.Predict - gent_score),
gent_score.APE = ifelse(gent_score.Predict != 0, abs(gent_score.Predict - gent_score) / gent_score.Predict, 0))
# Average Absolute Percentage Error (APE) across all folds
mean_APE <- mean(APEs, na.rm = TRUE)
mean_predict <- mean(PHLCensus.test$gent_score.Predict)
mean_predict
mean_error <- mean(PHLCensus.test$gent_score.Error)
mean_error
library(caret)
inTrain <- createDataPartition(
y = paste(PHLCensus$gent_score),
p = .60, list = FALSE)
PHLCensus.training <- PHLCensus[inTrain,]
PHLCensus.test <- PHLCensus[-inTrain,]
reg.training <- lm(gent_score ~ ., data = st_drop_geometry(PHLCensus.training) %>%
dplyr::select(gent_score, num_permits_t2, total_parks_t2,
school_count_2019, crime_count_2019, Med_Age_t2))
PHLCensus.test <-
PHLCensus.test %>%
mutate(gent_score.Predict = predict(reg.training, PHLCensus.test),
gent_score.Error = gent_score.Predict - gent_score,
gent_score.AbsError = abs(gent_score.Predict - gent_score),
gent_score.APE = (abs(gent_score.Predict - gent_score)) / gent_score.Predict)
# Define the number of folds for cross-validation
k <- 10
# Create indices for k-fold cross-validation
folds <- createFolds(PHLCensus$gent_score, k = k, list = TRUE)
# Initialize vectors to store performance metrics for each fold
APEs <- numeric(k)
# Perform k-fold cross-validation
for (i in 1:k) {
# Extract training and testing indices for this fold
train_indices <- unlist(folds[-i])
test_indices <- unlist(folds[i])
# Split data into training and testing sets
PHLCensus.training <- PHLCensus[train_indices, ]
PHLCensus.test <- PHLCensus[test_indices, ]
# Fit the model
reg.training <- lm(gent_score ~ ., data = st_drop_geometry(PHLCensus.training) %>%
dplyr::select(gent_score, num_permits_t2, total_parks_t2,
school_count_2019, crime_count_2019, Med_Age_t2))
# Make predictions on the testing set
predictions <- predict(reg.training, PHLCensus.test)
# Calculate performance metrics for this fold
errors <- predictions - PHLCensus$gent_score[test_indices]
abs_errors <- abs(errors)
APE <- abs_errors / predictions
# Store the performance metrics for this fold
APEs[i] <- mean(APE, na.rm = TRUE)
}
PHLCensus.test <- PHLCensus.test %>%
mutate(gent_score.Predict = predict(reg.training, newdata = PHLCensus.test),
gent_score.Error = gent_score.Predict - gent_score,
gent_score.AbsError = abs(gent_score.Predict - gent_score),
gent_score.APE = ifelse(gent_score.Predict != 0, abs(gent_score.Predict - gent_score) / gent_score.Predict, 0))
# Average Absolute Percentage Error (APE) across all folds
mean_APE <- mean(APEs, na.rm = TRUE)
mean_predict <- mean(PHLCensus.test$gent_score.Predict)
mean_predict
mean_error <- mean(PHLCensus.test$gent_score.Error)
mean_error
mean_abs_error <- mean(PHLCensus.test$gent_score.AbsError)
mean_abs_error
mean_APE <- mean(PHLCensus.test$gent_score.APE)
mean_APE
min_gent<- min(PHLCensus.test$gent_score)
min_gent
max_gent<- max(PHLCensus.test$gent_score)
max_gent
standard_deviation <- sd(PHLCensus.test$gent_score)
# Define the number of folds for cross-validation
k <- 10
# Create indices for k-fold cross-validation
folds <- createFolds(PHLCensus$gent_score, k = k, list = TRUE)
# Initialize vectors to store performance metrics for each fold
APEs <- numeric(k)
# Perform k-fold cross-validation
for (i in 1:k) {
# Extract training and testing indices for this fold
train_indices <- unlist(folds[-i])
test_indices <- unlist(folds[i])
# Split data into training and testing sets
PHLCensus.training <- PHLCensus[train_indices, ]
PHLCensus.test <- PHLCensus[test_indices, ]
# Fit the model
reg.training <- lm(gent_score ~ ., data = st_drop_geometry(PHLCensus.training) %>%
dplyr::select(gent_score, num_permits_t2, total_parks_t2,
school_count_2019, crime_count_2019, Med_Age_t2))
# Make predictions on the testing set
predictions <- predict(reg.training, PHLCensus.test)
# Calculate performance metrics for this fold
errors <- predictions - PHLCensus$gent_score[test_indices]
abs_errors <- abs(errors)
APE <- abs_errors / predictions
# Store the performance metrics for this fold
APEs[i] <- mean(APE, na.rm = TRUE)
}
PHLCensus.test <- PHLCensus.test %>%
mutate(gent_score.Predict = predict(reg.training, newdata = PHLCensus.test),
gent_score.Error = gent_score.Predict - gent_score,
gent_score.AbsError = abs(gent_score.Predict - gent_score),
gent_score.APE = ifelse(gent_score.Predict != 0, abs(gent_score.Predict - gent_score) / gent_score.Predict, 0))
# Average Absolute Percentage Error (APE) across all folds
mean_APE <- mean(APEs, na.rm = TRUE)
mean_predict <- mean(PHLCensus.test$gent_score.Predict)
mean_predict
mean_error <- mean(PHLCensus.test$gent_score.Error)
mean_error
mean_abs_error <- mean(PHLCensus.test$gent_score.AbsError)
mean_abs_error
mean_APE <- mean(PHLCensus.test$gent_score.APE)
mean_APE
min_gent<- min(PHLCensus.test$gent_score)
min_gent
max_gent<- max(PHLCensus.test$gent_score)
max_gent
View(PHLCensus.test)
PHLCensus <- PHLCensus %>%
mutate(gent_score_difference = gent_score_2022 - gent_score.predict)
PHLCensus <- PHLCensus %>%
mutate(gent_score_differen = gent_score_2022 - gent_score.predict)
PHLCensus <- PHLCensus.test %>%
mutate(gent_score_differen = gent_score_2022 - gent_score.predict)
PHLCensus <- PHLCensus.test %>%
mutate(gent_score_differen = gent_score_2022 - gent_score.Predict)
PHLCensus.test <- PHLCensus.test %>%
mutate(gent_score_differen = gent_score_2022 - gent_score.Predict)
PHLCensus.test <- PHLCensus.test %>%
mutate(error.2022 = gent_score.Predict - gent_score_2022,
absError.2022 = abs(gent_score.Predict - gent_score_2022),
aPE.2022 = ifelse(gent_score.Predict != 0, abs(gent_score.Predict - gent_score_2022) / gent_score.Predict, 0))
mean_abs_error <- mean(PHLCensus.test$absError.2022)
mean_abs_error
mean_abs_error
